# Система проверки ответов студентов

Веб-приложение для загрузки, проверки и оценивания ответов студентов преподавателями. Разработано с использованием React, TypeScript и Material-UI.

## Функциональность

### Для студентов:
- Регистрация и авторизация
- Загрузка ответов в различных форматах (DOC, DOCX, PDF, TXT, PPT, PPTX)
- Просмотр статуса проверки и оценок
- Получение комментариев от преподавателей

### Для преподавателей:
- Просмотр списка всех ответов
- Фильтрация ответов по статусу, предмету и студенту
- Автоматическая проверка ответов
- Ручная проверка с возможностью выставления оценки и комментария
- Отслеживание прогресса проверки

## Технологии

- React 18
- TypeScript
- Material-UI (MUI) v5
- React Router v6
- MSW (Mock Service Worker) для эмуляции API
- Axios для HTTP-запросов
- Vite для сборки проекта

## Установка и запуск

1. Клонируйте репозиторий:
```bash
git clone <repository-url>
cd diplom-app
```

2. Установите зависимости:
```bash
npm install
```

3. Запустите проект в режиме разработки:
```bash
npm run dev
```

Приложение будет доступно по адресу: http://localhost:5173

## Структура проекта

```
src/
├── components/     # Переиспользуемые компоненты
├── context/       # React контексты (Auth, Answer)
├── mocks/         # Моки API с использованием MSW
├── pages/         # Компоненты страниц
├── App.tsx        # Корневой компонент
└── main.tsx       # Точка входа
```

## Основные функции

### Управление ответами

- Загрузка ответов в виде текста или файла
- Автоматическое определение типа файла
- Валидация размера и формата файлов
- Отображение прогресса проверки

### Система проверки

#### Автоматическая проверка
- Быстрая оценка ответа
- Генерация автоматического комментария
- Установка статуса "проверено"

#### Ручная проверка
- Форма для выставления оценки (0-100 баллов)
- Поле для подробного комментария
- Валидация введенных данных

### Фильтрация и поиск

- Фильтрация по статусу проверки
- Поиск по имени студента
- Фильтрация по предмету
- Сброс всех фильтров

## Статусы ответов

- `pending` - Ожидает проверки
- `in_progress` - Проверяется
- `evaluated` - Оценено

## Разработка

### Запуск тестов
```bash
npm run test
```

### Сборка для продакшена
```bash
npm run build
```

### Линтинг
```bash
npm run lint
```

## Mock Service Worker (MSW)

Проект использует MSW для эмуляции API в режиме разработки. Моки находятся в директории `src/mocks/`.

### Основные эндпоинты:

- `GET /api/answers` - Получение всех ответов
- `GET /api/answer/:id` - Получение конкретного ответа
- `POST /api/upload` - Загрузка нового ответа
- `PUT /api/answer/:id` - Обновление ответа
- `POST /api/auto-evaluate/:id` - Автоматическая проверка ответа

## Контекст приложения

### AuthContext
- Управление состоянием авторизации
- Хранение информации о пользователе
- Разграничение ролей (студент/преподаватель)

### AnswerContext
- Управление состоянием ответов
- Методы для добавления и обновления ответов
- Кэширование данных

## Стилизация

Проект использует Material-UI с кастомной темой. Поддерживаются:
- Светлая и темная темы
- Адаптивный дизайн
- Кастомные цвета и типография

## Безопасность

- Валидация всех пользовательских данных
- Проверка прав доступа для разных ролей
- Безопасная обработка файлов
- Защита от XSS через React и MUI

## Планы по развитию

- [ ] Добавление реального API
- [ ] Интеграция с системами антиплагиата
- [ ] Расширенная статистика по оценкам
- [ ] Система уведомлений
- [ ] Экспорт данных в различные форматы

## Автор

РИ-410931 Удалых Максим Сергеевич